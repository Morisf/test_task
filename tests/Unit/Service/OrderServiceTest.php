<?php

namespace App\Tests\Unit\Service;

use App\Entity\Station;
use App\Exceptions\KeyNotFoundException;
use App\Exceptions\NotEnoughEquipmentException;
use App\Exceptions\StationNotFoundException;
use App\Repository\EquipmentRepository;
use App\Repository\OrderRepository;
use App\Service\OrderService;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ObjectRepository;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class OrderServiceTest extends TestCase
{
    private EntityManagerInterface|MockObject $manager;
    private ObjectRepository|MockObject $objectRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->manager = $this->createMock(EntityManagerInterface::class);
        $this->objectRepository = $this->createMock(ObjectRepository::class);
    }

    public function testCreateOrderKeyNotFoundException(): void
    {
        $service = new OrderService($this->manager);
        $this->expectException(KeyNotFoundException::class);
        $service->createOrder([
            'endDate' => '',
            'startLocation' => '',
            'endLocation' => '',
            'equipment' => '',
            'camperId' => '',
        ]);
    }

    public function testCreateOrderStartStationNotFoundException(): void
    {
        $this->manager->expects($this->exactly(2))
            ->method('getRepository')
            ->willReturn($this->objectRepository);

        $this->objectRepository->expects($this->exactly(2))->method('find')->willReturn(null);

        $service = new OrderService($this->manager);
        $this->expectException(StationNotFoundException::class);
        $service->createOrder([
            'startDate' => '2022-03-23',
            'endDate' => '2022-03-25',
            'startLocation' => 1,
            'endLocation' => 1,
            'equipment' => [],
            'camperId' => 1,
        ]);
    }

    public function testCreateOrderEndStationNotFoundException(): void
    {
        $this->manager->expects($this->exactly(2))
            ->method('getRepository')
            ->willReturn($this->objectRepository);

        $this->objectRepository->expects($this->exactly(2))
            ->method('find')
            ->willReturnOnConsecutiveCalls('anything', null);

        $service = new OrderService($this->manager);
        $this->expectException(StationNotFoundException::class);
        $service->createOrder([
            'startDate' => '2022-03-23',
            'endDate' => '2022-03-25',
            'startLocation' => 1,
            'endLocation' => 1,
            'equipment' => [],
            'camperId' => 1,
        ]);
    }

    public function testCreateOrderNotEnoughEquipmentException(): void
    {
        $equipmentRepositoryMock = $this->createMock(EquipmentRepository::class);
        $this->manager->expects($this->exactly(4))
            ->method('getRepository')
            ->willReturn($this->objectRepository);

        $this->objectRepository->expects($this->exactly(3))
            ->method('find')
            ->willReturnOnConsecutiveCalls(
                new Station(),
                new Station(),
                $equipmentRepositoryMock,
                $equipmentRepositoryMock
            );

        $service = new OrderService($this->manager);
        $this->expectException(NotEnoughEquipmentException::class);

        $service->createOrder([
            'startDate' => '2022-03-23',
            'endDate' => '2022-03-25',
            'startLocation' => 1,
            'endLocation' => 1,
            'equipment' => [
                ['id' => 1, 'quantity' => 1],
                ['id' => 2, 'quantity' => 1],
            ],
            'camperId' => 1,
        ]);
    }

    public function testFinishOpenOrders()
    {
        $orderRepository = $this->createMock(OrderRepository::class);
        $this->manager->expects($this->once())->method('getRepository')->willReturn($orderRepository);
        $orderRepository->expects($this->once())->method('finishOpenOrders');

        $service = new OrderService($this->manager);
        $service->finishOpenOrders();
    }
}
